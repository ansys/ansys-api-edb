// Proto file for Transforms

syntax = "proto3";

// Package
package ansys.api.edb.v1;

// Imports
import "ansys/api/edb/v1/edb_messages.proto";
import "ansys/api/edb/v1/point_data.proto";
import "ansys/api/edb/v1/polygon_data.proto";

service TransformService {
  // io_flags:
  //   - cache
  rpc Rotate (PointDataRotateMessage) returns (PointMessage) {}

  // io_flags:
  //   - buffer
  //   - returns_future
  //   - write_no_cache_invalidation
  rpc Create (TransformMessage) returns (EDBObjMessage) {}

  // io_flags:
  //   - cache
  rpc GetScale (EDBObjMessage) returns (ValueMessage) {}

  // io_flags:
  //   - buffer
  rpc SetScale (ValuePropertyMessage) returns (google.protobuf.Empty) {}

  // io_flags:
  //   - cache
  rpc GetMirror (EDBObjMessage) returns (google.protobuf.BoolValue) {}

  // io_flags:
  //   - buffer
  rpc SetMirror (BoolPropertyMessage) returns (google.protobuf.Empty) {}

  // io_flags:
  //   - cache
  rpc GetRotation (EDBObjMessage) returns (ValueMessage) {}

  // io_flags:
  //   - buffer
  rpc SetRotation (ValuePropertyMessage) returns (google.protobuf.Empty) {}

  // io_flags:
  //   - cache
  rpc GetOffsetX (EDBObjMessage) returns (ValueMessage) {}

  // io_flags:
  //   - buffer
  rpc SetOffsetX (ValuePropertyMessage) returns (google.protobuf.Empty) {}

  // io_flags:
  //   - cache
  rpc GetOffsetY (EDBObjMessage) returns (ValueMessage) {}

  // io_flags:
  //   - buffer
  rpc SetOffsetY (ValuePropertyMessage) returns (google.protobuf.Empty) {}

  // io_flags:
  //   - buffer
  //   - returns_future
  rpc TransformPlus (TransformOperatorMessage) returns (EDBObjMessage) {}

  // io_flags:
  //   - cache
  rpc IsIdentity (EDBObjMessage) returns (google.protobuf.BoolValue) {}

  // io_flags:
  //   - cache
  rpc TransformPoint (PointPropertyMessage) returns (PointMessage) {}

  // io_flags:
  //   - cache
  rpc TransformPolygon (PolygonDataPropertyMessage) returns (PolygonDataMessage) {}
}

message TransformMessage {
  ValueMessage scale = 1;
  ValueMessage angle = 2;
  bool mirror = 3;
  ValueMessage offset_x = 4;
  ValueMessage offset_y = 5;
}

message TransformPropertyMessage {
  EDBObjMessage target = 1;
  TransformMessage transf = 2;
}

message TransformOperatorMessage {
  EDBObjMessage target_1 = 1;
  EDBObjMessage target_2 = 2;
}