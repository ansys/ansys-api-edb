// Proto file representing the EDB Polygon Data class

syntax = "proto3";

package ansys.api.edb.v1;

import "ansys/api/edb/v1/edb_messages.proto";
import "ansys/api/edb/v1/point_data.proto";

enum IntersectionType
{
  NO_INTERSECTION = 0;
  THIS_INSIDE_OTHER = 1;
  OTHER_INSIDE_THIS = 2;
  COMMON_INTERSECTION = 3;
  UNDEFINED_INTERSECTION = 4;
};

// Polygon Data service definition
service PolygonDataService {
  // io_flags:
  //   - cache
  rpc GetNormalizedPoints (PolygonDataMessage) returns (PointsMessage) {}

  // io_flags:
  //   - cache
  rpc IsCircle (PolygonDataMessage) returns (google.protobuf.BoolValue) {}

  // io_flags:
  //   - cache
  rpc IsBox (PolygonDataMessage) returns (google.protobuf.BoolValue) {}

  // io_flags:
  //   - cache
  rpc HasSelfIntersections (PolygonDataWithToleranceMessage) returns (google.protobuf.BoolValue) {}

  // io_flags:
  //   - cache
  rpc RemoveSelfIntersections (PolygonDataWithToleranceMessage) returns (PolygonDataListMessage) {}

  // io_flags:
  //   - cache
  rpc IsConvex (PolygonDataMessage) returns (google.protobuf.BoolValue) {}

  // io_flags:
  //   - cache
  rpc GetArea (PolygonDataMessage) returns (google.protobuf.FloatValue) {}

  // io_flags:
  //   - cache
  rpc Transform (PolygonDataTransformMessage) returns (PolygonDataMessage) {}

  // io_flags:
  //   - cache
  rpc GetBBox (PolygonDataListMessage) returns (BoxMessage) {}

  // io_flags:
  //   - cache
  rpc GetConvexHull (PolygonDataListMessage) returns (PolygonDataMessage) {}

  // io_flags:
  //   - cache
  rpc RemoveArcs (PolygonDataRemoveArcMessage) returns (PolygonDataMessage) {}

  // io_flags:
  //   - cache
  rpc Defeature (PolygonDataWithToleranceMessage) returns (PolygonDataMessage) {}

  // io_flags:
  //   - cache
  rpc GetBoundingCircle (PolygonDataMessage) returns (CircleMessage) {}

  // io_flags:
  //   - cache
  rpc IsInside (PolygonDataWithPointMessage) returns (google.protobuf.BoolValue) {}

  // io_flags:
  //   - cache
  rpc CircleIntersectsPolygon (PolygonDataWithCircleMessage) returns (google.protobuf.BoolValue) {}

  // io_flags:
  //   - cache
  rpc GetIntersectionType (PolygonDataPairWithToleranceMessage) returns (IntersectionTypeMessage) {}

  // io_flags:
  //   - cache
  rpc GetClosestPoints (PolygonDataWithPointsMessage) returns (PointsMessage) {}

  // io_flags:
  //   - cache
  rpc GetUnion (PolygonDataListMessage) returns (PolygonDataListMessage) {}

  // io_flags:
  //   - cache
  rpc GetIntersection (PolygonDataPairMessage) returns (PolygonDataListMessage) {}

  // io_flags:
  //   - cache
  rpc Subtract (PolygonDataPairMessage) returns (PolygonDataListMessage) {}

  // io_flags:
  //   - cache
  rpc Xor (PolygonDataPairMessage) returns (PolygonDataListMessage) {}

  // io_flags:
  //   - cache
  rpc Expand (PolygonDataExpandMessage) returns (PolygonDataListMessage) {}

  // io_flags:
  //   - cache
  rpc Get2DAlphaShape (PolygonDataGetAlphaShapeMessage) returns (PolygonDataListMessage) {}
}

message PolygonDataMessage {
  repeated PointMessage points = 1;
  bool closed = 2;
  PolySense sense = 3;
  repeated PolygonDataMessage holes = 4;
}

message PolygonDataListMessage {
  repeated PolygonDataMessage polygons = 1;
}

message PolygonDataWithToleranceMessage {
  PolygonDataMessage polygon = 1;
  float tol = 2;
}

message PolygonDataPairMessage {
  PolygonDataListMessage first = 1;
  PolygonDataListMessage second = 2;
}

message PolygonDataPairWithToleranceMessage {
  PolygonDataMessage first = 1;
  PolygonDataMessage second = 2;
  float tol = 3;
}

message PolygonDataTransformMessage {
  message PointValueMessage {
    PointMessage point = 1;
    float value = 2;
  }

  PolygonDataMessage polygon = 1;
    oneof op {
      PointMessage move = 2;
      PointValueMessage rotate = 3;
    PointValueMessage scale = 4;
    float mirror_x = 5;
  }
}

message PolygonDataRemoveArcMessage {
  PolygonDataMessage polygon = 1;
  float max_chord_error = 2;
  float max_arc_angle = 3;
  int64 max_points = 4;
}

message PolygonDataWithCircleMessage {
  PolygonDataMessage polygon = 1;
  CircleMessage circle = 2;
}

message PolygonDataWithPointMessage {
  PolygonDataMessage target = 1;
  PointMessage point = 2;
}

message PolygonDataWithPointsMessage {
  PolygonDataMessage target = 1;
  oneof coord {
    PointMessage point = 2;
    PolygonDataMessage polygon = 3;
  }
}

message PolygonDataExpandMessage {
  PolygonDataMessage polygon = 1;
  float offset = 2;
  float tol = 3;
  bool round_corner = 4;
  float max_corner_extension = 5;
}

message PolygonDataGetAlphaShapeMessage {
  repeated PointMessage points = 1;
  float alpha = 2;
}

message IntersectionTypeMessage {
  IntersectionType intersection_type = 1;
}

message PolygonDataPropertyMessage {
  EDBObjMessage target = 1;
  PolygonDataMessage value = 2;
}
